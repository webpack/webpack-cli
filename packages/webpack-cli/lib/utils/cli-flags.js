const packageExists = require('./package-exists');
const cli = packageExists('webpack') ? require('webpack').cli : undefined;

const minimumHelpFlags = [
    'config',
    'config-name',
    'merge',
    'env',
    'mode',
    'watch',
    'watch-options-stdin',
    'stats',
    'devtool',
    'entry',
    'target',
    'progress',
    'json',
    'name',
    'output-path',
];

const builtInFlags = [
    // For configs
    {
        name: 'config',
        usage: '--config <path-to-config> | --config <path-to-config> --config <path-to-config>',
        alias: 'c',
        type: String,
        multiple: true,
        description: 'Provide path to a webpack configuration file e.g. ./webpack.config.js.',
    },
    {
        name: 'config-name',
        usage: '--config-name <name-of-config> | --config-name <name-of-config> --config-name <name-of-config>',
        type: String,
        multiple: true,
        description: 'Name of the configuration to use.',
    },
    {
        name: 'merge',
        usage: '--config <first-config> --config <second-config> --merge',
        alias: 'm',
        type: Boolean,
        description: "Merge two or more configurations using 'webpack-merge'.",
    },
    // Complex configs
    {
        name: 'env',
        usage: '--env <variable> | --env <variable> --env <variable=value>',
        type: String,
        multipleType: true,
        description: 'Environment passed to the configuration when it is a function.',
    },

    // Adding more plugins
    {
        name: 'hot',
        usage: '--hot',
        alias: 'h',
        type: Boolean,
        negative: true,
        description: 'Enables Hot Module Replacement',
        negatedDescription: 'Disables Hot Module Replacement.',
    },
    {
        name: 'analyze',
        usage: '--analyze',
        type: Boolean,
        multiple: false,
        description: 'It invokes webpack-bundle-analyzer plugin to get bundle information.',
    },
    {
        name: 'progress',
        usage: '--progress | --progress profile',
        type: [Boolean, String],
        description: 'Print compilation progress during build.',
    },
    {
        name: 'prefetch',
        usage: '--prefetch <request>',
        type: String,
        description: 'Prefetch this request.',
    },

    // Output options
    {
        name: 'json',
        usage: '--json | --json <path-to-stats-file>',
        type: [String, Boolean],
        alias: 'j',
        description: 'Prints result as JSON or store it in a file.',
    },

    // For webpack@4
    {
        name: 'entry',
        usage: '--entry <path-to-entry-file> | --entry <path> --entry <path>',
        type: String,
        multiple: true,
        description: 'The entry point(s) of your application e.g. ./src/main.js.',
    },
    {
        name: 'output-path',
        usage: '--output-path <path-to-output-directory>',
        alias: 'o',
        type: String,
        description: 'Output location of the file generated by webpack e.g. ./dist/.',
    },
    {
        name: 'target',
        usage: '--target <value> | --target <value> --target <value>',
        alias: 't',
        type: String,
        multiple: cli !== undefined,
        description: 'Sets the build target e.g. node.',
    },
    {
        name: 'devtool',
        usage: '--devtool <value>',
        type: String,
        negative: true,
        alias: 'd',
        description: 'Determine source maps to use.',
        negatedDescription: 'Do not generate source maps.',
    },
    {
        name: 'mode',
        usage: '--mode <development | production | none>',
        type: String,
        description: 'Defines the mode to pass to webpack.',
    },
    {
        name: 'name',
        usage: '--name',
        type: String,
        description: 'Name of the configuration. Used when loading multiple configurations.',
    },
    {
        name: 'stats',
        usage: '--stats | --stats <value>',
        type: [String, Boolean],
        negative: true,
        description: 'It instructs webpack on how to treat the stats e.g. verbose.',
        negatedDescription: 'Disable stats output.',
    },
    {
        name: 'watch',
        usage: '--watch',
        type: Boolean,
        negative: true,
        alias: 'w',
        description: 'Watch for files changes.',
        negatedDescription: 'Do not watch for file changes.',
    },
    {
        name: 'watch-options-stdin',
        usage: '--watch-options-stdin',
        type: Boolean,
        negative: true,
        description: 'Stop watching when stdin stream has ended.',
    },
];

// Extract all the flags being exported from core.
// A list of cli flags generated by core can be found here https://github.com/webpack/webpack/blob/master/test/__snapshots__/Cli.test.js.snap
const coreFlags = cli
    ? Object.entries(cli.getArguments()).map(([flag, meta]) => {
          if (meta.simpleType === 'string') {
              meta.type = String;
              meta.usage = `--${flag} <value>`;
          } else if (meta.simpleType === 'number') {
              meta.type = Number;
              meta.usage = `--${flag} <value>`;
          } else {
              meta.type = Boolean;
              meta.negative = !flag.endsWith('-reset');
              meta.usage = `--${flag}`;
          }

          const inBuiltIn = builtInFlags.find((builtInFlag) => builtInFlag.name === flag);

          if (inBuiltIn) {
              return { ...meta, name: flag, group: 'core', ...inBuiltIn };
          }

          return { ...meta, name: flag, group: 'core' };
      })
    : [];
const flags = []
    .concat(builtInFlags.filter((builtInFlag) => !coreFlags.find((coreFlag) => builtInFlag.name === coreFlag.name)))
    .concat(coreFlags)
    .map((option) => {
        option.help = minimumHelpFlags.includes(option.name) ? 'minimum' : 'verbose';

        return option;
    });

module.exports = { cli, flags };
