import Generator from "yeoman-generator";
import { Input, InputValidate } from "@webpack-cli/webpack-scaffold";

import validate from "./validate";

interface CustomGenerator extends Generator {
	usingDefaults?: boolean;
}

/**
 *
 * Prompts for entry points, either if it has multiple or one entry
 *
 * @param	{Object} self 	- A variable holding the instance of the prompting
 * @param	{Object} answer - Previous answer from asking if the user wants single or multiple entries
 * @returns	{Object} An Object that holds the answers given by the user, later used to scaffold
 */

export default async function entry(
	self: CustomGenerator,
	multiEntries: boolean,
	autoGenerateDefaults = false
): Promise<void | {}> {
	const webpackEntryPoint: object = {};
	// TODO: refactoring to async/await
	async function forEachPromise(
		entries: string[],
		fn: (entryProp: string) => Promise<void | {}>
	): Promise<object | {}> {
		return entries.reduce((promise: Promise<{}>, prop: string): object => {
			const trimmedProp: string = prop.trim();

			return promise.then(
				(n: object): Promise<void | {}> => {
					if (n) {
						Object.keys(n).forEach((val: string): void => {
							if (
								n[val].charAt(0) !== "(" &&
								n[val].charAt(0) !== "[" &&
								!n[val].includes("function") &&
								!n[val].includes("path") &&
								!n[val].includes("process")
							) {
								n[val] = `\'./${n[val].replace(/"|'/g, "").concat(".js")}\'`;
							}
							webpackEntryPoint[val] = n[val];
						});
					} else {
						n = {};
					}
					return fn(trimmedProp);
				}
			);
		}, Promise.resolve());
	}

	if (multiEntries) {
		const multipleEntriesAnswer = await InputValidate(
			self,
			"multipleEntries",
			"What do you want to name your bundles? (separated by comma)",
			validate,
			"pageOne, pageTwo",
			autoGenerateDefaults
		);

		const entryIdentifiers: string[] = multipleEntriesAnswer.multipleEntries.split(",");

		const entryPropAnswer = await forEachPromise(
			entryIdentifiers,
			(entryProp: string): Promise<void | {}> => {
				return InputValidate(
					self,
					`${entryProp}`,
					`What is the location of "${entryProp}"?`,
					validate,
					`src/${entryProp}`,
					autoGenerateDefaults
				);
			}
		);
		const remainingEntryPropKeys = Object.keys(entryPropAnswer);
		if (remainingEntryPropKeys.length > 0) {
			remainingEntryPropKeys.forEach((val: string): void => {
				if (
					entryPropAnswer[val].charAt(0) !== "(" &&
					entryPropAnswer[val].charAt(0) !== "[" &&
					!entryPropAnswer[val].includes("function") &&
					!entryPropAnswer[val].includes("path") &&
					!entryPropAnswer[val].includes("process")
				) {
					entryPropAnswer[val] = `\'./${entryPropAnswer[val].replace(/"|'/g, "").concat(".js")}\'`;
				}
				webpackEntryPoint[val] = entryPropAnswer[val];
			});
		}
		return webpackEntryPoint;
	}
	const singleEntryResult = await Input(
		self,
		"singularEntry",
		"Which will be your application entry point?",
		"src/index",
		autoGenerateDefaults
	);
	let { singularEntry } = singleEntryResult;
	singularEntry = `\'./${singularEntry.replace(/"|'/g, "").concat(".js")}\'`;
	return singularEntry;
}
